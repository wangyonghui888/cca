/*存储过程*/

DROP PROCEDURE IF EXISTS p_r_merchant_sport_order_year;
DELIMITER //
CREATE PROCEDURE p_r_merchant_sport_order_year()
BEGIN

    /*声明日志信息*/
    DECLARE task_type INT(2) DEFAULT 20;
    DECLARE result_code CHAR(5) DEFAULT '0';
    DECLARE start_time VARCHAR(30) DEFAULT get_cur_ymdhms();
    DECLARE end_time VARCHAR(30);
    DECLARE result INT(2) DEFAULT 1;
    DECLARE exce_msg VARCHAR(512) DEFAULT '成功:p_r_merchant_sport_order_year.';
    DECLARE msg TEXT;

/*异常处理*/
    DECLARE EXIT HANDLER FOR SQLEXCEPTION BEGIN
        GET DIAGNOSTICS CONDITION 1 result_code = RETURNED_SQLSTATE, msg = MESSAGE_TEXT;
        SET end_time = get_cur_ymdhms();
        SET exce_msg = CONCAT("错误码：", result_code, " 错误信息：p_r_merchant_sport_order_year", msg);
        SET result = 2;
        CALL p_add_task_event_log(task_type, start_time, end_time, result, exce_msg);
    END;

/*sql开始*/
    REPLACE INTO r_merchant_sport_order_year
    SELECT Concat(t.merchant_code, t.sport_id, t.YEAR) AS id,
           t.sport_id,
           t.merchant_code,
           min(t.merchant_name),
           t.YEAR,
           min(t.merchant_level),
           sum(t.add_user),
           max(t.register_total_user_sum),
           (case sum(t.register_total_user_sum)
                when 0 then 0
                else
                    (sum(t.bet_user_sum) / sum(t.register_total_user_sum)) end),
           sum(t.profit),
           (case sum(t.bet_amount)
                when 0 then 0
                else
                    (sum(t.profit) / sum(t.bet_amount)) end),
           (case sum(t.bet_amount)
                when 0 then 0
                else
                    (sum(t.return_amount) / sum(t.bet_amount)) end),
           sum(t.return_amount),
           sum(t.bet_amount),
           sum(t.order_sum),
           sum(t.bet_user_sum),
           sum(t.first_bet_user_sum),
           0,
           sum(t.settle_profit),
           sum(t.settle_return),
           (case sum(t.settle_bet_amount)
                when 0 then 0
                else
                    (sum(t.settle_return) / sum(t.settle_bet_amount)) end),
           sum(t.settle_bet_amount),
           sum(t.settle_order_num),
           0,
           sum(t.live_profit),
           sum(t.live_return),
           (case sum(t.live_bet_amount)
                when 0 then 0
                else
                    sum(t.live_return) / sum(t.live_bet_amount) end),
           sum(t.live_bet_amount),
           sum(t.live_order_num),
           UNIX_TIMESTAMP(CURRENT_TIMESTAMP(3)),
           max(t.parent_code)                          as parent_code,
           max(t.parent_name)                          as parent_name,
           0,
           0
    FROM (SELECT *, substring(time, 1, 4) AS 'year' FROM r_merchant_sport_order_month where merchant_code is not null) t
    GROUP BY t.merchant_code,
             t.sport_id,
             t.YEAR;
    /*sql结束*/

/*执行成功，添加日志*/
    SET end_time = get_cur_ymdhms();

    SET exce_msg = CONCAT(current_date, " p_r_merchant_sport_order_year success!");


    CALL p_add_task_event_log(task_type, start_time, end_time, result, exce_msg);

END//
DELIMITER ;